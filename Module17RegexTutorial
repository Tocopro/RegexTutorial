# Regex Turorial for Matching Texts such as Emails or Telephone numbers

## Summary

The Regex I will be describing will be the regex used in regular expressions.
In JavaScript, there are multiple methods of using Regex.
I will be covering regex that can be used in getting data like telephone numbers, Emails, and Expressions in strings that communicate or transmit information.
Regex can be used in any programming language.

## Table of Contents

- [Anchors](#anchors)
- [Quantifiers](#quantifiers)
- [OR Operator](#or-operator)
- [Character Classes](#character-classes)
- [Flags](#flags)
- [Grouping and Capturing](#grouping-and-capturing)
- [Bracket Expressions](#bracket-expressions)
- [Greedy and Lazy Match](#greedy-and-lazy-match)
- [Boundaries](#boundaries)
- [Back-references](#back-references)
- [Look-ahead and Look-behind](#look-ahead-and-look-behind)

## Regex Components

### Anchors

/^([a-z0-9_.-]+)@([\da-z.-]+).([a-z.]{2,6})$/

This type of regex will use the syntax ^ which means it is the start and the end of the string, while the end is detected using $. When using the anchors ^ and $, multiline is disabled so the markers indicate the start and end of the string.

### Quantifiers

/^([a-z0-9_.-] + )@([\da-z.-] + ).([a-z.] {2, 6} )$/

In regex, quantifiers are the characters that state how many times the previous character or group should be matched. They allow you to specify the number of occurrences of characters in a group.

- indicates that the previous character must occur at least once or more times.
  for example, the direction could say that the email user name must include a letter only [a-z] in lowercase with no special character or the phone numbers should only include integers only [0-9]. Or special characters [_\.-]. The [\da-z\.] sequence at least once.
  The {2, 6} are used to set a range for the number of times a user can pick from selected bracket [a-z\.] where the user needs to select at least 2 characters but no more than 6 characters.

### OR Operator

[] the OR operator is used to indicate any character between the square brackets i.e. [a-z] any letters(s) in the lower case only. The | represents the OR operator.
OR operators can be used in telephone numbers selection i.e. ^(0[1-9]|1[0123]) the user can pick a number starting with 0 or 1 followed by the sequenced number in the square brackets. This allows the developer to control the numbers selected.

### Character Classes

Character classes are shortcuts to a set of codes that the developers can include in their regex.
They are identified with a backslash \ followed by a single character.
Some examples are:
a. \d: it is short for digit which has the same meaning as [0-9]
b. \b: word boundary is a class followed by a specific string. i.e. \bsand will locate sandwich but not quicksand
c. \w: A universal regex used to cover the common characters used. [a-zA-Z0-9_]

### Flags

A flag is an optional parameter to a regex that modifies its behavior of searching.
In javascript, there are 6 flags
i is used to ignoring casing upper or lower
g is used to indicate global
s dot all wild charcter . match the new line
m multiline makes the boundary character ^ and $
y sticky makes the expression start searching from the index indicating its last index property
u Unicode an expression assume individual characters as code points not code units and thus match 32-bit character as well.

### Grouping and Capturing

A part of a pattern is enclosed in parentheses (...), called capturing a group.
It has two effects

a. Allowing to get a part of the match as a separate item in the result array

b. if a quantifier is placed after the parenthesis it applies the parenthesis as a whole.

i.e. parenthesis group characters together so (go+) means go, gogo, gogogog, and so forth.

### Bracket Expressions

A bracket expression represents the specific characters that one wishes to match in Regex. Within a set of [], a bracket expression can allow input to include specific characters or a specific range of inputs i.e. a-z, A-Z, 0-9

### Greedy and Lazy Match

Regex, in general, can be considered "Greedy" The quantifiers in the string will attempt to match the input with any occurrence in the string. If the "*" quantifier was included in the quantifier then any occurrence in the string will be matched, in other words, try to match as many occurrences as possible. But if "?" were to be added to the regex then that becomes the lazy approach. The regex will attempt to find the least amount of matches that occur.

### Boundaries

Boundaries are used to capture specific instances or changes within a chosen string. They are used with the characters \b. One common use is to search for whole words. i.e. if the user or developer was searching for the word "cat", would be `\bcat\b` in order to search for the word cat only.it may return the `cat` is white and yellow but will not return "`cat`ch the bus".


### Back-references

back-references are regular expression commands that refer to a previous part of the matched regular expression. Back-references are specified with a backslash and a single digit (e.g. ‘\1’). The part of the regular expression they refer to is called a subexpression and is designated with parentheses.
`([abc])\1` using `\1` will match the same text that was matched by the first capturing group.

### Look-ahead and Look-behind


Lookahead and lookbehind, collectively called “lookaround”, are zero-length assertions just like the start and end of the line, and start and end of word anchors explained earlier in this tutorial. The difference is that lookaround actually matches characters, but then gives up the match, returning only the result: match or no match. That is why they are called “assertions”. They do not consume characters in the string, but only assert whether a match is possible or not. Lookaround allows you to create regular expressions that are impossible to create without them, or that would get very longwinded without them.

look behind `?<=` means to look after a specified sentence. If an expression had `(?<=The Cat is).*` in a text containing `The Cat is lazy`, the result will highlight the word `lazy` since it is behind the specified string. The front of or look ahead would be the opposite `(?<=truck is).*` in a text with `A black truck is bigger in size`, the result would be `black` because it appears before the words specified by the developer/user.


## Author

Nicholas Wachira is a student is the fullstack bootcamp at the University of Minnesota.

Github repository  URL https://github.com/Tocopro/RegexTutorial
